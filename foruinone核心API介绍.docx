# 4in1



Fourinone1.0是一个并行计算框架、2.0是一个分布式文件系统（Fttp）、4.0是一个数据库引擎。
Fourinone开发包自带config文件，运行时必须要有。
配置文件和核心API都尽量简化，xml配置里一般不需要修改。需要修改的，见例子。
一般常用的API例子都有说明，没说明的一般不用，API多了不容易上手，例子已经基本覆盖所有API。

工头和工人之间是异步调用，会马上返回，需要检查结果是否完成。
WareHouse[] hmarr = new WareHouse[wks.length];
这里通过hmarr数组来记录每次每个工人任务分配的结果，需要轮循hmarr的每个结果是否已经计算完成，如果计算完成就设置为null，进行新的任务安排。
工头和工人之间的计算交互有两种模式，一种是工头直接调用工人，一种是通过park消息中枢调用工人，可以在配置文件里配置COMPUTREMODE的默认值进行指定，默认是直接调用方式。

核心API说明：
工头：
WareHouse giveTask（WareHouse inhouse）实现分配工人要做的任务
WorkerLocal[] getWaitingWorkers(String workerType)获取集群中等待的工人
WareHouse[] doTaskBatch(WorkerLocal[] wks, WareHouse wh)所有工人批量完成给定任务处理（理解什么叫做批量的完成）
doProject(WareHouse inhouse)工头开始项目启动
toNext多个包工头链式处理

工人：
WareHouse doTask(WareHouse inhouse)实现工头分配的任务
waitWorking(String workerType) 等待工作状态，指定工人类型
三个参数：工人监听ip、工人监听接口、工人类型。
Workman[] getWorkerAll()获取所有的工人
Workman[] getWorkerElse()获取除自己外的其他工人
Workman[] getWorkerElse(String workerType)获取其他某种类型的工人
Workman getWorkerIndex(int index)获取第index位工人
Workman getWorkerIndex（String workerType, int index）获取某种类型的第index位工人
int getSelfIndex();获取资金在工作中的位置
boolean receive(WareHouse inhouse)接收来自其他工人的传递

	概念：
计算节点：一个用于计算的服务器就叫做一个计算节点。同理，一个ParkServer就成为一个控制节点。
分布式测试数据的特点：每一个计算节点上都要有一定量的数据，一般是000M*n的数据形式，其中n表示节点数量。
测试效果：1.每个机器都分配到了自己该做的事情；2.功能上输出正确结果；3.统计测试花费的时间；4.与其他框架做对比，重点在于fourinone有哪些不足，而这些不足我们能否承受。

 
分布式系统测试结果分析：
第一，	按照全段应用业务功能点及流程进行操作，观察返回结果是否符合业务方的需求预期。
第二，	第二操作后端的服务器（通常是重启、宕机、断网等操作），观察前端应用的返回结果是否符合系统的设计要求。
我们现在所做的工作就是对后面这一问题的模拟。

测试结果的分析方法：
观察前端应用的返回结果；
分析服务器日志；
分析操作系统的一些重要信息，来诊断服务器程序是否存在异常。比如，top命令、netstat命令、sar命令等等。Netstat命令，检查服务器程序是否正确地监听了指定的端口；
借助其他分析工具，比如如何判断服务器程序是否产生了内存漏洞？通常需要借助于内存检测工具来进行分析；

分布式系统压力测试与性能测试：
数据准备；
性能或压力测试工具；（一般由测试工程师自己实现，注意测试工具本身的性能也要好。）
于是有了分布式系统自动化测试。

分布式系统自动化测试问题：
涉及平台多且硬件杂，测试流程控制困难；
测试结果验证复杂；

分布式系统目标
本地自治；不依赖于中心场地；可连续操作性；位置独立性；分片独立性；复制独立性；分布式查询处理；分布式事务管理；硬件独立性；操作系统独立性；网络独立性；DBMS独立性。
